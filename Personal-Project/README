(#Cited Fromï¼š https://sjsu.instructure.com/courses/1229630/pages/cmpe-202-personal-project-uml-parser-2017)
(#Reference By: 
  https://examples.javacodegeeks.com/
  https://docs.oracle.com/javase/7/docs/api/java/
  https://tomassetti.me/getting-started-with-javaparser-analyzing-java-code-programmatically/#top

  https://www.spinellis.gr/umlgraph/doc/indexw.html
)


CMPE 202 - Personal Project - UML Parser - 2017
 

PROJECT DESCRIPTION

 

Objectives:

In this project, you will be applying what you learned about UML by creating a Parser which converts Java Source Code into a UML Class Diagram.  Also, in this project, you will be applying "Personal Kanban" to manage your tasks.  See:  https://www.infoq.com/presentations/multi-tasking-personal-kanban (Links to an external site.).

 

Requirements:

The programming language, tools, sdk, libraries that you chose to use is entirely up to you. 
The parser must be executable on the command line with the following format:
umlparser <source folder> <output file name>
<source folder> is a folder name where all the .java source files will be
<output file name> is the name of the output image file you program will generate ( .jpg, .png or .pdf format)
All the Java source files will be in the "default" package.  That is, there will be no sub-directories in the source folder.
You must register for a "free" account on https://waffle.io/  (Links to an external site.)and maintain a weekly update of your Kanban Board. 
The content of Board is up to you to plan, but you must track your weekly count of number of cards "completed" and "in-progress" and calculate wait and cycle times.  This can be done by simply taking a "snapshot" of your board for submission with clearly labeled "calculated numbers"
 

Grading:

40 points will be based on 4 weekly submissions of Kanban board and report
Weekly Kanban board submissions must be submitted on-time on Canvas
Late or Email submissions are not accepted.  If it is not in Canvas, it is not submitted.
50 points of your project will be graded based on 5 test cases created by Instructor.
Test case results should match at least 80% of what is expected for full credit
10 points for a short one page PDF file describing the libraries and tools you used to create the parser.

If you don't submit your source code, or if your source code is found to be similar to another student's work, your final project submission with be worth zero out of 60.
 

Extra Credit (Max 20 points):

Integrate your UML Parser with a Cloud Scale Web Application by teaming up with one or two CMPE 281 students. (5 points per student / max 10)
Extended your UML Parser to perform dynamic analysis of the Java Source code to generate a UML Sequence Diagram.  The UML Sequence Diagram must be generated by executing the Java Source Code. The Test Code will be executed from a Static Main class method in a Main.java class. (10 points)
Note: a sample Java Program for testing Sequence Diagram Generation is here:  https://github.com/paulnguyen/cmpe202/tree/master/umlparser/uml-sequence-test (Links to an external site.)
 

Hints for Parser:

Default Package: All Java source files will be in the "default" package.  That is, there will be only one directory (i.e. no subdirectories)
Dependencies & Uses Relationships for Interfaces Only:  Do not include dependencies in output UML diagram except in the cases of "interfaces/uses"
Class Declarations with optional Extends and Implements: Make sure to include proper notation for inheritance and interface implementations.  
Only Include Public Methods (ignore private, package and protected scope)
Only Include Private and Public Attributes (ignore package and protected scope)
Java Setters and Getters:  Must Support also Java Style Public Attributes as "setters and getters"
Must Include Types for Attributes, Parameters and Return types on Methods
Classifier vs Attributes Compartment:  If there is a Java source file, then there should be a "UML Class" on the Diagram for it.  That is, if there is no Java source file for a class and the class is part of an instance variable, put the class/property in the attribute compartment
Interfaces - Implements and Uses Notation:  Show Interfaces along with Clients of Interfaces (as dependencies). 
Notes and Exclusions:

Static and Abstract Notation:  Static and Abstract notation in UML are usually denoted as "underline" and "italic", but rarely used in practice.  Parsing this is not a requirement for this project.
Relationships Between Interfaces:  Although conceptually possible in UML, relationships between Interfaces (i.e. inheritance, dependencies) are rarely thought of in practice and generally bad practice.  As such, this project does not expect parser to detect these situations.  Focus your work on the relationships and dependencies from Classes to Interfaces.
For Additional Pointers on UML Notation, see lecture notes and http://www.uml-diagrams.org/class-reference.html (Links to an external site.) 
 

Example for How to Parse Java Setters/Getters:

The expected output for Class Source with Java Setters/Getters is to interpret as a "Public Attribute" instead of Private with public setter/getter methods.  Also, the public setter and getter methods should not be visible (i.e. not on class diagram) in the operations compartment.

For example Hello1.java :

class Hello1 {
    private String str ;
    public String getStr() { return this.str ; }
    public void   setStr(String value) { this.str = value ; }
}
Should be drawn as:

hello1-uml-png.png
 

Recommended Tools:

You may use any tools (java based, or other languages). Some recommended tools for parsing Java Source and generating UML diagrams are as follows:

For example (but not limited to):

Java Grammar Parsers:
http://javaparser.org/ (Links to an external site.)
https://javacc.java.net (Links to an external site.)
http://www.antlr.org (Links to an external site.)  
http://parboiled.org (Links to an external site.)
UML Diagram Generators:
http://www.umlgraph.org (Links to an external site.)
http://plantuml.com (Links to an external site.)
http://abstratt.github.io/textuml (Links to an external site.)
https://github.com/greensnark/sequence (Links to an external site.)
 

SAMPLE PROJECT TEST CASES

 

Test Case #1:

Java Source Code:  https://github.com/paulnguyen/cmpe202/tree/master/umlparser/uml-parser-test-1 (Links to an external site.) 
Sample yUML "Intermediate" Code from Parser:
[A|-x:int;-y:int(*)]1-0..*[B],
[A]-1[C],
[A]-*[D]

Sample yUML Output (Resulting in Diagram):  
** Note: yUML uses brackets and so parenthesis are used instead for arrays **

uml-parser-test1.png
 

Test Case #2:  https://github.com/paulnguyen/cmpe202/tree/master/umlparser/uml-parser-test-2 (Links to an external site.) 

Java Source Code: 

Sample yUML "Intermediate" Code from Parser:

[C1|+test(a1:A1)]uses -.->[<<interface>>;A1],
[<<interface>>;A1]^-.-[B1],
[<<interface>>;A1]^-.-[B2],
[P]^-[B1],
[P]^-[B2],
[<<interface>>;A2]^-.-[B2],
[C2|+test(a2:A2)]uses -.->[<<interface>>;A2]
Sample yUML Output (resulting in Diagram):

uml-parser-test-2-yuml-example-v2.png

Sample Astah UML Model (With C2, A2 and B2 in Ball & Socket Notation):
uml-parser-test-2-ball-n-socket-v2.png

 

 

Test Case #3:

Java Source Code:  https://github.com/paulnguyen/cmpe202/tree/master/umlparser/uml-parser-test-3 (Links to an external site.)
Expected Class Diagram: 

uml-parser-test3.png
 

 

Test Case #4:

Java Source Code:  https://github.com/paulnguyen/cmpe202/tree/master/umlparser/uml-parser-test-4 (Links to an external site.)
Expected Class Diagram:  
uml-parser-test-4.png
 Expected Class Diagram (Alternative Icon Notation for Interfaces):

uml-parser-test-4-icon.png 
 

Test Case #5:

Java Source Code:  https://github.com/paulnguyen/cmpe202/tree/master/umlparser/uml-parser-test-5 (Links to an external site.)
Expected Class Diagram:
uml-parser-test-5.png
